//
//  SectionsViewController.swift
//  PronacaShareholders
//
//  Created by CarlosDz on 18/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class SectionsViewController: UIViewController {

    @IBOutlet weak var sectionsHeaderCollection: UICollectionView!
    @IBOutlet weak var productsCollection: UICollectionView!
    
    // MARK: - Public properties -
    var presenter: SectionsPresenterInterface!

    let dataHeader: [String] = ["Todos", "Mr. Pollo", "Mr. Chancho", "Mr. Pavo", "Mr. Fish", "Mr. Huevos"]
    var customDataHeader: [ShelfCellModel] = []
    var productsInShelf: [ShelfCollectionModel] = []
    
    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpView()
        setUpCollections()
        configureBackButton()
        configureRightButtons()
    }

    private func setUpView() {
        customDataHeader = self.dataHeader.compactMap{ ShelfCellModel(title: $0, color: .green1) }
        customDataHeader[0].isSelected = true
        
        let products: [ProductItemModel] = [
            ProductItemModel(icon: UIImage(named: "pollo")!, title: "Duo Pacj Mor. Pollo peso 2.5Kg a 3.5Kg", amount: "$3,76", numberOfProducts: 0),
            ProductItemModel(icon: UIImage(named: "pollo")!, title: "Duo Pacj Mor. Pollo peso 2.5Kg a 3.5Kg", amount: "$3,76", numberOfProducts: 0),
            ProductItemModel(icon: UIImage(named: "pollo")!, title: "Duo Pacj Mor. Pollo peso 2.5Kg a 3.5Kg", amount: "$3,76", numberOfProducts: 0),
            ProductItemModel(icon: UIImage(named: "pollo")!, title: "Duo Pacj Mor. Pollo peso 2.5Kg a 3.5Kg", amount: "$3,76", numberOfProducts: 0),
            ProductItemModel(icon: UIImage(named: "pollo")!, title: "Duo Pacj Mor. Pollo peso 2.5Kg a 3.5Kg", amount: "$3,76", numberOfProducts: 0)
        ]
        productsInShelf = self.dataHeader.compactMap{ ShelfCollectionModel(icon: UIImage(named: "pronacaRed")!, title: $0, buttonText: "Ver todos", products: products) }
    }
    
    private func setUpCollections() {
        sectionsHeaderCollection.register(UINib(nibName: "\(ShelfCell.self)", bundle: nil), forCellWithReuseIdentifier: "\(ShelfCell.self)")
        productsCollection.register(UINib(nibName: "\(ShelfCollectionCell.self)", bundle: nil), forCellWithReuseIdentifier: "\(ShelfCollectionCell.self)")
        sectionsHeaderCollection.delegate = self
        sectionsHeaderCollection.dataSource = self
        productsCollection.delegate = self
        productsCollection.dataSource = self
    }
    
    private func configureBackButton() {
        navigationItem.configureBarButtonWithLabel(
            imageName: "backArrow",
            title: "Cánicos",
            tintColor: .black1,
            target: self,
            selector: #selector(backAction),
            side: .left
        )
    }
    
    private func configureRightButtons() {
        navigationItem.configureCartButton(
            tintColor: .black1,
            target: self,
            selector: #selector(openCart),
            side: .right
        )
    }
    
    @objc func backAction() {
        if let navigation = navigationController {
            navigation.popViewController(animated: true)
        } else {
            self.dismiss(animated: true, completion: nil)
        }
    }
    
    @objc func openCart() {
        guard let navigation = navigationController else { return }
        navigation.pushWireframe(CartWireframe())
    }
}

// MARK: - Extensions -
extension SectionsViewController: SectionsViewInterface {
    
    func reloadShelfs() {
        UIView.performWithoutAnimation {
            sectionsHeaderCollection.reloadData()
        }
    }
}

extension SectionsViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        switch collectionView {
        case sectionsHeaderCollection: return 1
        case productsCollection: return 1
        default: break
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch collectionView {
        case sectionsHeaderCollection:
            return customDataHeader.count
        case productsCollection:
            return productsInShelf.count
        default: break
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        switch collectionView {
        case sectionsHeaderCollection:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "\(ShelfCell.self)", for: indexPath) as! ShelfCell
            cell.delegate = self
            cell.configure(with: customDataHeader[indexPath.row], indexPath: indexPath)
            return cell
        case productsCollection:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "\(ShelfCollectionCell.self)", for: indexPath) as! ShelfCollectionCell
            cell.delegate = self
            cell.configure(with:  productsInShelf[indexPath.row], indexPath: indexPath)
            return cell
        default: break
        }
        
        return UICollectionViewCell()
    }
    
}

extension SectionsViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        switch collectionView {
        case sectionsHeaderCollection: return CGSize(width: 100.0, height: collectionView.bounds.height)
        case productsCollection: return CGSize(width: collectionView.bounds.width, height: 194.0)
        default: return .zero
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        switch collectionView {
        case sectionsHeaderCollection: return UIEdgeInsets(top: 0, left: 15, bottom: 1, right: 15)
        case productsCollection: return UIEdgeInsets(top: 0, left: 25, bottom: 1, right: 25)
        default: return .zero
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 12.0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
}

extension SectionsViewController: ShelfCellDelegate {
    func selectedShelf(indexPath: IndexPath) {
        customDataHeader = customDataHeader.map{ item in
            var item = item
            item.isSelected = false
            return item
        }
        customDataHeader[indexPath.row].isSelected = true
        reloadShelfs()
    }
}

extension SectionsViewController: ShelfCollectionCellDelegate {
    
    func showMore(indexPath: IndexPath) {
        print("CEDA: shomore - SectionsViewController")
    }
}
